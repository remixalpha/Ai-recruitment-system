{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nrequire('dotenv').config();\n\n// Import controllers\nconst hrControllers = require('./controllers/hrControllers');\nconst userController = require('./controllers/userController');\nconst app = express();\n\n// Connect to database\nmongoose.connect(process.env.MONGO_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB Connected')).catch(err => console.log(err));\n\n// Middleware\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\n\n// Routes\napp.post('/hr/register', hrControllers.registerHR);\napp.post('/hr/login', hrControllers.loginHR);\napp.get('/hr/:hrId/profile', hrControllers.getHRProfile);\napp.put('/hr/:hrId/approve', hrControllers.approveHRAccount);\napp.post('/user/register', userController.register);\napp.post('/user/login', userController.login);\napp.get('/user', userController.getUser);\n\n// Start the server\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`Server started on port ${PORT}`));","map":{"version":3,"names":["express","require","bodyParser","mongoose","config","hrControllers","userController","app","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","use","json","urlencoded","extended","post","registerHR","loginHR","get","getHRProfile","put","approveHRAccount","register","login","getUser","PORT","listen"],"sources":["/home/remixalpha/Documents/WORK/React/react-files/backend/src/index.js"],"sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nrequire('dotenv').config();\n\n// Import controllers\nconst hrControllers = require('./controllers/hrControllers');\nconst userController = require('./controllers/userController');\n\nconst app = express();\n\n// Connect to database\nmongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB Connected'))\n  .catch(err => console.log(err));\n\n// Middleware\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Routes\napp.post('/hr/register', hrControllers.registerHR);\napp.post('/hr/login', hrControllers.loginHR);\napp.get('/hr/:hrId/profile', hrControllers.getHRProfile);\napp.put('/hr/:hrId/approve', hrControllers.approveHRAccount);\napp.post('/user/register', userController.register);\napp.post('/user/login', userController.login);\napp.get('/user', userController.getUser);\n\n// Start the server\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`Server started on port ${PORT}`));\n\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAU,CAAC;AACpCA,OAAO,CAAC,QAAQ,CAAC,CAACG,MAAM,EAAE;;AAE1B;AACA,MAAMC,aAAa,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;AAC5D,MAAMK,cAAc,GAAGL,OAAO,CAAC,8BAA8B,CAAC;AAE9D,MAAMM,GAAG,GAAGP,OAAO,EAAE;;AAErB;AACAG,QAAQ,CAACK,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,SAAS,EAAE;EAAEC,eAAe,EAAE,IAAI;EAAEC,kBAAkB,EAAE;AAAK,CAAC,CAAC,CACzFC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAC5CC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC,CAAC;;AAEjC;AACAX,GAAG,CAACY,GAAG,CAACjB,UAAU,CAACkB,IAAI,EAAE,CAAC;AAC1Bb,GAAG,CAACY,GAAG,CAACjB,UAAU,CAACmB,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;;AAElD;AACAf,GAAG,CAACgB,IAAI,CAAC,cAAc,EAAElB,aAAa,CAACmB,UAAU,CAAC;AAClDjB,GAAG,CAACgB,IAAI,CAAC,WAAW,EAAElB,aAAa,CAACoB,OAAO,CAAC;AAC5ClB,GAAG,CAACmB,GAAG,CAAC,mBAAmB,EAAErB,aAAa,CAACsB,YAAY,CAAC;AACxDpB,GAAG,CAACqB,GAAG,CAAC,mBAAmB,EAAEvB,aAAa,CAACwB,gBAAgB,CAAC;AAC5DtB,GAAG,CAACgB,IAAI,CAAC,gBAAgB,EAAEjB,cAAc,CAACwB,QAAQ,CAAC;AACnDvB,GAAG,CAACgB,IAAI,CAAC,aAAa,EAAEjB,cAAc,CAACyB,KAAK,CAAC;AAC7CxB,GAAG,CAACmB,GAAG,CAAC,OAAO,EAAEpB,cAAc,CAAC0B,OAAO,CAAC;;AAExC;AACA,MAAMC,IAAI,GAAGxB,OAAO,CAACC,GAAG,CAACuB,IAAI,IAAI,IAAI;AACrC1B,GAAG,CAAC2B,MAAM,CAACD,IAAI,EAAE,MAAMlB,OAAO,CAACC,GAAG,CAAE,0BAAyBiB,IAAK,EAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}